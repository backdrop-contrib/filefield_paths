<?php
/**
 * @file
 * Redirect module tests for the File (Field) Paths module.
 */

require_once __DIR__ . '/filefield_paths.test';

/**
 * Test filefield_paths redirects.
 */
class FileFieldPathsRedirectTestCase extends FileFieldPathsTestCase {

  /**
   * @inheritdoc
   */
  public function setUp() {
    // Setup required modules.
    parent::setUp(array('redirect'));
  }

  /**
   * Test File (Field) Paths Redirect functionality.
   */
  public function testRedirect() {
    global $base_path;
    $langcode = LANGUAGE_NONE;

    // Create a File field with a random File path.
    $field_name = backdrop_strtolower($this->randomName());
    $instance_settings['filefield_paths']['file_path']['value'] = $this->randomName();
    $this->createFileField($field_name, $this->content_type, array(), $instance_settings);

    // Create a node with a test file.
    $test_file = current($this->backdropGetTestFiles('text'));
    $nid = $this->uploadNodeFile($test_file, $field_name, $this->content_type);

    // Get processed source file uri.
    $node = node_load($nid, NULL, TRUE);
    $source = $node->{$field_name}[$langcode][0]['uri'];

    // Update file path and create redirect.
    $edit = array(
      'instance[settings][filefield_paths][file_path][value]' => $this->randomName(),
      'instance[settings][filefield_paths][redirect]' => TRUE,
      'instance[settings][filefield_paths][retroactive_update]' => TRUE,
    );
    $this->backdropPost("admin/structure/types/manage/{$this->content_type}/fields/{$field_name}", $edit, t('Save settings'));

    // Get processed destination file uri.
    $node = node_load($nid, NULL, TRUE);
    $destination = $node->{$field_name}[$langcode][0]['uri'];

    // Ensure that the source uri redirects to the destination uri.
    $parsed_source = parse_url(file_create_url($source), PHP_URL_PATH);
    $redirect_source = backdrop_substr(urldecode($parsed_source), backdrop_strlen($base_path));

    $parsed_destination = parse_url(file_create_url($destination), PHP_URL_PATH);
    $redirect_destination = backdrop_substr(urldecode($parsed_destination), backdrop_strlen($base_path));

    $redirect = redirect_load_by_source($redirect_source);
    $this->assert(is_object($redirect) && $redirect->redirect == $redirect_destination, 'Redirect created for relocated file.');
  }

}
