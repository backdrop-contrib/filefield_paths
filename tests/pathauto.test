<?php
/**
 * @file
 * Pathauto module tests for the File (Field) Paths module.
 */

require_once __DIR__ . '/filefield_paths.test';

/**
 * Pathauto module tests for filefield_paths.
 */
class FileFieldPathsPathautoCase extends FileFieldPathsTestCase {

  /**
   * Test Path(auto) cleanup in File (Field) Paths.
   */
  public function testPathauto() {
    $langcode = LANGUAGE_NONE;

    // Create a File field.
    $field_name = backdrop_strtolower($this->randomName());

    $instance_settings['filefield_paths']['file_path']['value'] = 'node/[node:title]';
    $instance_settings['filefield_paths']['file_path']['options']['path'] = TRUE;
    $instance_settings['filefield_paths']['file_name']['value'] = '[node:title].[file:ffp-extension-original]';
    $instance_settings['filefield_paths']['file_name']['options']['path'] = TRUE;

    $this->createFileField($field_name, $this->content_type, array(), $instance_settings);

    // Create a node with a test file.
    $test_file = current($this->backdropGetTestFiles('text'));
    $edit['title'] = $this->randomString() . ' ' . $this->randomString();

    $edit['files[' . $field_name . '_' . $langcode . '_0]'] = backdrop_realpath($test_file->uri);
    $this->backdropPost("node/add/{$this->content_type}", $edit, t('Save'));

    // Ensure that file path/name have been processed correctly by Pathauto.
    $node = node_load(1);

    module_load_include('inc', 'path');
    $parts = explode('/', $node->title);
    foreach ($parts as &$part) {
      $part = path_clean_string($part);
    }
    $title = implode('/', $parts);

    $this->assertEqual($node->{$field_name}[$langcode][0]['uri'], "public://node/{$title}/{$title}.txt", t('File path/name has been processed correctly by Pathauto'));
  }

}
