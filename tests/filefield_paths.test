<?php
/**
 * @file
 * Tests for the File (Field) Paths module.
 */

/**
 * Tests filefield_paths module functionality.
 */
class FileFieldPathsTestCase extends BackdropWebTestCase {
  protected $profile = 'testing';
  protected $admin_user;

  public $content_type = NULL;
  public $public_files_directory = NULL;

  /**
   * @inheritdoc
   */
  public function setUp() {
    // Setup required modules.
    $modules = func_get_args();
    if (isset($modules[0]) && is_array($modules[0])) {
      $modules = $modules[0];
    }
    $modules[] = 'field_ui';
    $modules[] = 'file';
    $modules[] = 'path';
    $modules[] = 'image';
    $modules[] = 'filefield_paths_test';
    parent::setUp($modules);

    $custom_format = array(
      'format' => 'custom_html',
      'name' => 'Custom HTML',
      'weight' => 0,
      'editor' => NULL,
      'filters' => array(
        // URL filter.
        'filter_url' => array(
          'weight' => 0,
          'status' => 1,
        ),
        // HTML corrector filter.
        'filter_htmlcorrector' => array(
          'weight' => 10,
          'status' => 1,
        ),
      ),
    );
    $custom_format = (object) $custom_format;
    filter_format_save($custom_format);
    $custom_format_permission = filter_permission_name($custom_format);
    $anonymous_permissions = array(
      'access content',
    );
    $authenticated_permissions = array(
      'access content',
      $custom_format_permission,
    );
    user_role_grant_permissions(BACKDROP_ANONYMOUS_ROLE, $anonymous_permissions);
    user_role_grant_permissions(BACKDROP_AUTHENTICATED_ROLE, $authenticated_permissions);

    // Easy pattern to get the nid.
    config_set('path.settings', 'node_pattern', 'node/[node:nid]');
    // Create a content type.
    $content_type       = $this->backdropCreateContentType();
    $this->content_type = $content_type->name;

    $this->admin_user = $this->backdropCreateUser(array(
      'access content',
      'access administration pages',
      'administer site configuration',
      'administer content types',
      'administer nodes',
      'bypass node access',
      'administer fields',
      'create url aliases',
      'manage files',
      'delete files',
    ));
    $this->backdropLogin($this->admin_user);
    return TRUE;
  }

  /**
   * @inheritdoc
   */
  protected function createFileField($name, $type_name, $field_settings = array(), $instance_settings = array(), $widget_settings = array()) {
    $cardinality = 1;
    if (isset($field_settings['cardinality'])) {
      $cardinality = $field_settings['cardinality'];
      unset($field_settings['cardinality']);
    }
    $field = array(
      'field_name' => $name,
      'type' => 'file',
      'cardinality' => $cardinality,
      'settings' => $field_settings,
    );
    field_create_field($field);
    $this->attachFileField($name, 'node', $type_name, $instance_settings, $widget_settings);
  }

  /**
   * Create a field instance.
   */
  protected function attachFileField($name, $entity_type, $bundle, $instance_settings = array(), $widget_settings = array()) {
    $instance = array(
      'field_name' => $name,
      'label' => $name,
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'required' => !empty($instance_settings['required']),
      'settings' => array(),
      'widget' => array(
        'type' => 'file_generic',
        'settings' => array(),
      ),
    );
    $instance['settings'] = array_merge($instance['settings'], $instance_settings);
    $instance['widget']['settings'] = array_merge($instance['widget']['settings'], $widget_settings);
    field_create_instance($instance);
  }

  /**
   * Creates a new image field.
   *
   * @param string $name
   *   The name of the new field (all lowercase), exclude the "field_" prefix.
   * @param string $type_name
   *   The node type that this field will be added to.
   * @param array $field_settings
   *   A list of field settings that will be added to the defaults.
   * @param array $instance_settings
   *   A list of instance settings that will be added to the instance defaults.
   * @param array $widget_settings
   *   A list of widget settings that will be added to the widget defaults.
   */
  protected function createImageField($name, $type_name, array $field_settings = array(), array $instance_settings = array(), array $widget_settings = array()) {
    $field             = array(
      'field_name'  => $name,
      'type'        => 'image',
      'settings'    => array(),
      'cardinality' => !empty($field_settings['cardinality']) ? $field_settings['cardinality'] : 1,
    );
    $field['settings'] = array_merge($field['settings'], $field_settings);
    field_create_field($field);

    $instance                       = array(
      'field_name'  => $name,
      'label'       => $name,
      'entity_type' => 'node',
      'bundle'      => $type_name,
      'required'    => !empty($instance_settings['required']),
      'settings'    => array(),
      'widget'      => array(
        'type'     => 'image_image',
        'settings' => array(),
      ),
    );
    $instance['settings']           = array_merge($instance['settings'], $instance_settings);
    $instance['widget']['settings'] = array_merge($instance['widget']['settings'], $widget_settings);
    field_create_instance($instance);
    $this->backdropPost("admin/structure/types/manage/{$this->content_type}/fields/{$name}", array(), t('Save settings'));
  }

  /**
   * Uploads a file to a node.
   */
  protected function uploadNodeFile($file, $field_name, $nid_or_type, $new_revision = TRUE, $extras = array()) {
    $langcode = LANGUAGE_NONE;
    $edit = array(
      "title" => $this->randomName(),
      'revision' => (string) (int) $new_revision,
    );

    if (is_numeric($nid_or_type)) {
      $nid = $nid_or_type;
    }
    else {
      // Add a new node.
      $extras['type'] = $nid_or_type;
      $node = $this->backdropCreateNode($extras);
      $nid = $node->nid;
      // Save at least one revision to better simulate a real site.
      $this->backdropCreateNode(get_object_vars($node));
      $node = node_load($nid, NULL, TRUE);
      $this->assertNotEqual($nid, $node->vid, 'Node revision exists.');
    }

    // Attach a file to the node.
    $edit['files[' . $field_name . '_' . $langcode . '_0]'] = backdrop_realpath($file->uri);
    $this->backdropPost("node/$nid/edit", $edit, t('Save'));

    return $nid;
  }

}
